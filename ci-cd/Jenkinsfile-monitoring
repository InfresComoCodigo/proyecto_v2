pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ACTION',
            choices: ['deploy', 'update', 'restart', 'stop'],
            description: 'Acci√≥n a realizar en el stack de monitoreo'
        )
        booleanParam(
            name: 'CLEAN_VOLUMES',
            defaultValue: false,
            description: 'Limpiar vol√∫menes al detener (‚ö†Ô∏è Se perder√°n datos)'
        )
        booleanParam(
            name: 'REBUILD_IMAGES',
            defaultValue: false,
            description: 'Reconstruir im√°genes Docker'
        )
    }
    
    environment {
        COMPOSE_FILE = 'docker-compose-monitoring.yml'
        MONITORING_DIR = 'ci-cd'
    }
    
    stages {
        stage('Preparation') {
            steps {
                script {
                    echo "üöÄ Preparando despliegue del stack de monitoreo..."
                    echo "üìã Acci√≥n seleccionada: ${params.ACTION}"
                    
                    // Verificar que Docker est√© disponible
                    sh '''
                        echo "üîç Verificando Docker..."
                        docker --version
                        docker-compose --version
                        
                        echo "üìÅ Verificando estructura de archivos..."
                        ls -la ${MONITORING_DIR}/
                    '''
                }
            }
        }
        
        stage('Build Images') {
            when {
                anyOf {
                    equals expected: 'deploy', actual: params.ACTION
                    equals expected: true, actual: params.REBUILD_IMAGES
                }
            }
            steps {
                dir("${MONITORING_DIR}") {
                    script {
                        sh '''
                            echo "üèóÔ∏è  Construyendo imagen personalizada de Jenkins..."
                            docker-compose -f ${COMPOSE_FILE} build jenkins
                            
                            echo "üì¶ Verificando im√°genes construidas..."
                            docker images | grep jenkins
                        '''
                    }
                }
            }
        }
        
        stage('Deploy Stack') {
            when {
                equals expected: 'deploy', actual: params.ACTION
            }
            steps {
                dir("${MONITORING_DIR}") {
                    script {
                        sh '''
                            echo "üöÄ Desplegando stack de monitoreo..."
                            
                            # Crear directorios necesarios
                            echo "üìÅ Creando directorios..."
                            mkdir -p jenkins-logs
                            mkdir -p prometheus/{rules,data}
                            mkdir -p grafana/{dashboards,provisioning/{dashboards,datasources}}
                            mkdir -p logstash/{pipeline,config}
                            mkdir -p alertmanager
                            mkdir -p traefik
                            
                            # Ajustar permisos
                            chmod 777 jenkins-logs
                            chmod 777 prometheus/data
                            chmod 777 grafana
                            
                            # Desplegar servicios de infraestructura primero
                            echo "üîÑ Iniciando servicios de infraestructura..."
                            docker-compose -f ${COMPOSE_FILE} up -d elasticsearch prometheus
                            
                            # Esperar a que Elasticsearch est√© listo
                            echo "‚è≥ Esperando Elasticsearch..."
                            sleep 30
                            
                            # Desplegar servicios de logging
                            echo "üîÑ Iniciando servicios de logging..."
                            docker-compose -f ${COMPOSE_FILE} up -d logstash kibana
                            
                            # Desplegar servicios de monitoreo
                            echo "üîÑ Iniciando servicios de monitoreo..."
                            docker-compose -f ${COMPOSE_FILE} up -d grafana node-exporter cadvisor alertmanager
                            
                            # Esperar a que Grafana est√© listo
                            echo "‚è≥ Esperando Grafana..."
                            sleep 30
                            
                            # Desplegar Jenkins
                            echo "üîÑ Iniciando Jenkins..."
                            docker-compose -f ${COMPOSE_FILE} up -d jenkins
                            
                            # Desplegar proxy reverso
                            echo "üîÑ Iniciando Traefik..."
                            docker-compose -f ${COMPOSE_FILE} up -d traefik
                            
                            echo "‚úÖ Stack desplegado exitosamente"
                        '''
                    }
                }
            }
        }
        
        stage('Update Stack') {
            when {
                equals expected: 'update', actual: params.ACTION
            }
            steps {
                dir("${MONITORING_DIR}") {
                    script {
                        sh '''
                            echo "üîÑ Actualizando stack de monitoreo..."
                            
                            # Actualizar im√°genes
                            docker-compose -f ${COMPOSE_FILE} pull
                            
                            # Reconstruir servicios
                            docker-compose -f ${COMPOSE_FILE} up -d --force-recreate
                            
                            echo "‚úÖ Stack actualizado exitosamente"
                        '''
                    }
                }
            }
        }
        
        stage('Restart Stack') {
            when {
                equals expected: 'restart', actual: params.ACTION
            }
            steps {
                dir("${MONITORING_DIR}") {
                    script {
                        sh '''
                            echo "üîÑ Reiniciando stack de monitoreo..."
                            
                            # Reiniciar todos los servicios
                            docker-compose -f ${COMPOSE_FILE} restart
                            
                            echo "‚úÖ Stack reiniciado exitosamente"
                        '''
                    }
                }
            }
        }
        
        stage('Stop Stack') {
            when {
                equals expected: 'stop', actual: params.ACTION
            }
            steps {
                dir("${MONITORING_DIR}") {
                    script {
                        sh '''
                            echo "üõë Deteniendo stack de monitoreo..."
                            
                            if [ "${CLEAN_VOLUMES}" = "true" ]; then
                                echo "üßπ Limpiando vol√∫menes..."
                                docker-compose -f ${COMPOSE_FILE} down -v
                            else
                                docker-compose -f ${COMPOSE_FILE} down
                            fi
                            
                            echo "‚úÖ Stack detenido exitosamente"
                        '''
                    }
                }
            }
        }
        
        stage('Health Check') {
            when {
                anyOf {
                    equals expected: 'deploy', actual: params.ACTION
                    equals expected: 'update', actual: params.ACTION
                    equals expected: 'restart', actual: params.ACTION
                }
            }
            steps {
                dir("${MONITORING_DIR}") {
                    script {
                        sh '''
                            echo "üîç Verificando salud de servicios..."
                            
                            # Esperar a que los servicios est√©n listos
                            sleep 60
                            
                            # Verificar servicios
                            services=(
                                "jenkins:8080:/login"
                                "grafana:3000:/api/health"
                                "prometheus:9090/-/healthy"
                                "kibana:5601:/api/status"
                                "elasticsearch:9200/_cluster/health"
                                "traefik:8082:/api/overview"
                            )
                            
                            for service in "${services[@]}"; do
                                name=$(echo $service | cut -d: -f1)
                                port=$(echo $service | cut -d: -f2)
                                path=$(echo $service | cut -d: -f3)
                                
                                echo "üîç Verificando $name..."
                                
                                if curl -s -f "http://localhost:$port$path" > /dev/null; then
                                    echo "‚úÖ $name est√° funcionando correctamente"
                                else
                                    echo "‚ùå $name no responde correctamente"
                                fi
                            done
                            
                            echo "üìä Estado de contenedores:"
                            docker-compose -f ${COMPOSE_FILE} ps
                        '''
                    }
                }
            }
        }
        
        stage('Generate Report') {
            when {
                anyOf {
                    equals expected: 'deploy', actual: params.ACTION
                    equals expected: 'update', actual: params.ACTION
                }
            }
            steps {
                dir("${MONITORING_DIR}") {
                    script {
                        sh '''
                            echo "üìä Generando reporte de despliegue..."
                            
                            # Crear reporte HTML
                            cat > monitoring-deployment-report.html << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Monitoring Stack Deployment Report</title>
    <style>
                                body { font-family: Arial, sans-serif; margin: 40px; }
                                .success { color: green; }
                                .info { color: blue; }
                                .header { background-color: #e6f3ff; padding: 10px; border: 1px solid #0066cc; }
                                pre { background-color: #f5f5f5; padding: 10px; overflow-x: auto; }
                                table { border-collapse: collapse; width: 100%; }
                                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                                th { background-color: #f2f2f2; }
                            </style>
</head>
<body>
    <div class="header">
        <h1>üìä Monitoring Stack Deployment Report</h1>
        <p class="info">Deployment Date: $(date)</p>
        <p class="info">Action: ${ACTION}</p>
        <p class="info">Build: ${BUILD_NUMBER}</p>
    </div>
    
    <h2>üöÄ Deployed Services</h2>
    <table>
        <tr>
            <th>Service</th>
            <th>Port</th>
            <th>URL</th>
            <th>Status</th>
        </tr>
        <tr>
            <td>Jenkins</td>
            <td>8080</td>
            <td><a href="http://localhost:8080">http://localhost:8080</a></td>
            <td class="success">‚úÖ Running</td>
        </tr>
        <tr>
            <td>Grafana</td>
            <td>3000</td>
            <td><a href="http://localhost:3000">http://localhost:3000</a></td>
            <td class="success">‚úÖ Running</td>
        </tr>
        <tr>
            <td>Prometheus</td>
            <td>9090</td>
            <td><a href="http://localhost:9090">http://localhost:9090</a></td>
            <td class="success">‚úÖ Running</td>
        </tr>
        <tr>
            <td>Kibana</td>
            <td>5601</td>
            <td><a href="http://localhost:5601">http://localhost:5601</a></td>
            <td class="success">‚úÖ Running</td>
        </tr>
        <tr>
            <td>Traefik</td>
            <td>8082</td>
            <td><a href="http://localhost:8082">http://localhost:8082</a></td>
            <td class="success">‚úÖ Running</td>
        </tr>
    </table>
    
    <h2>üìã Container Status</h2>
    <pre>$(docker-compose -f ${COMPOSE_FILE} ps)</pre>
    
    <h2>üìä Default Credentials</h2>
    <table>
        <tr>
            <th>Service</th>
            <th>Username</th>
            <th>Password</th>
        </tr>
        <tr>
            <td>Grafana</td>
            <td>admin</td>
            <td>admin123</td>
        </tr>
        <tr>
            <td>Jenkins</td>
            <td>admin</td>
            <td>See initial admin password</td>
        </tr>
    </table>
    
    <h2>üîç Next Steps</h2>
    <ul>
        <li>Access Grafana to view monitoring dashboards</li>
        <li>Configure Jenkins jobs</li>
        <li>Set up alerting rules</li>
        <li>Configure log forwarding</li>
        <li>Customize dashboards</li>
    </ul>
</body>
</html>
EOF
                            
                            echo "‚úÖ Reporte generado: monitoring-deployment-report.html"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            dir("${MONITORING_DIR}") {
                script {
                    // Archivar reportes
                    archiveArtifacts artifacts: 'monitoring-deployment-report.html', allowEmptyArchive: true
                    
                    // Publicar reporte HTML
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'monitoring-deployment-report.html',
                        reportName: 'Monitoring Deployment Report'
                    ])
                }
            }
        }
        
        success {
            echo "‚úÖ Pipeline de monitoreo ejecutado exitosamente"
            echo "üéØ Acci√≥n: ${params.ACTION}"
            echo "üìä Accede a los servicios:"
            echo "   - Jenkins: http://localhost:8080"
            echo "   - Grafana: http://localhost:3000"
            echo "   - Prometheus: http://localhost:9090"
            echo "   - Kibana: http://localhost:5601"
        }
        
        failure {
            echo "‚ùå Pipeline de monitoreo fall√≥"
            echo "üîç Revisar logs para diagnosticar problemas"
            
            dir("${MONITORING_DIR}") {
                script {
                    sh '''
                        echo "üìã Estado actual de contenedores:"
                        docker-compose -f ${COMPOSE_FILE} ps
                        
                        echo "üîç Logs de servicios:"
                        docker-compose -f ${COMPOSE_FILE} logs --tail=50
                    '''
                }
            }
        }
    }
}
