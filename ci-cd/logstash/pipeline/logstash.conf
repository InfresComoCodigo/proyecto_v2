input {
  file {
    path => "/var/log/jenkins/*.log"
    start_position => "beginning"
    type => "jenkins"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
  }
  
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    type => "syslog"
  }
}

filter {
  if [type] == "jenkins" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{WORD:level} %{DATA:class} - %{GREEDYDATA:log_message}"
      }
    }
    
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
    }
    
    mutate {
      add_field => { "service" => "jenkins" }
    }
  }
  
  if [type] == "syslog" {
    grok {
      match => { 
        "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{DATA:program}: %{GREEDYDATA:log_message}"
      }
    }
  }
  
  # Filtrar logs de errores y warnings
  if [level] in ["ERROR", "WARN", "WARNING"] {
    mutate {
      add_tag => ["alert"]
    }
  }
  
  # Detectar eventos de build
  if [log_message] =~ /Started by/ {
    mutate {
      add_field => { "build_event" => "started" }
      add_tag => ["build"]
    }
  }
  
  if [log_message] =~ /Finished:/ {
    grok {
      match => { 
        "log_message" => "Finished: %{WORD:build_result}"
      }
    }
    mutate {
      add_field => { "build_event" => "finished" }
      add_tag => ["build"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logstash-%{+YYYY.MM.dd}"
  }
  
  # Enviar alertas a un topic especÃ­fico
  if "alert" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "alerts-%{+YYYY.MM.dd}"
    }
  }
  
  # Para debugging
  stdout {
    codec => rubydebug
  }
}
