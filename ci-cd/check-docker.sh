#!/bin/bash

# Script para verificar y configurar Docker Desktop en Windows/Linux/macOS

echo "üê≥ Verificador de Docker Desktop"
echo "================================"
echo ""

# Funci√≥n para mostrar resultado de prueba
test_result() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ $2"
    else
        echo "‚ùå $2"
        return 1
    fi
}

# Funci√≥n para mostrar advertencia
warning() {
    echo "‚ö†Ô∏è $1"
}

# Verificar si Docker est√° instalado
echo "üîç Verificando instalaci√≥n de Docker..."
if command -v docker >/dev/null 2>&1; then
    test_result 0 "Docker est√° instalado"
else
    test_result 1 "Docker no est√° instalado"
    echo ""
    echo "üì• Para instalar Docker:"
    echo "- Windows: https://www.docker.com/products/docker-desktop"
    echo "- macOS: https://www.docker.com/products/docker-desktop"
    echo "- Linux: sudo apt-get install docker.io (Ubuntu) o equivalente"
    echo ""
    exit 1
fi

echo ""

# Verificar si Docker est√° ejecut√°ndose
echo "üîç Verificando estado de Docker..."
if docker version >/dev/null 2>&1; then
    test_result 0 "Docker est√° ejecut√°ndose"
else
    test_result 1 "Docker no est√° ejecut√°ndose"
    echo ""
    echo "üöÄ Para iniciar Docker:"
    echo "- Windows/macOS: Abrir Docker Desktop"
    echo "- Linux: sudo systemctl start docker"
    echo ""
    echo "‚è≥ Si acabas de iniciar Docker, espera unos minutos..."
    echo ""
    exit 1
fi

echo ""

# Verificar conexi√≥n con Docker daemon
echo "üîç Verificando conexi√≥n con Docker daemon..."
if docker ps >/dev/null 2>&1; then
    test_result 0 "Conexi√≥n con Docker daemon OK"
else
    test_result 1 "No se puede conectar al daemon de Docker"
    echo ""
    echo "üîÑ Posibles soluciones:"
    echo "- Reiniciar Docker Desktop"
    echo "- Verificar permisos de usuario"
    echo "- En Linux: sudo usermod -aG docker \$USER (luego reiniciar sesi√≥n)"
    echo ""
    exit 1
fi

echo ""

# Mostrar informaci√≥n de Docker
echo "üìä Informaci√≥n de Docker:"
echo "-------------------------"
docker version --format "Cliente: {{.Client.Version}}" 2>/dev/null || echo "Cliente: $(docker version | grep 'Client:' -A1 | tail -1 | awk '{print $2}')"
docker version --format "Servidor: {{.Server.Version}}" 2>/dev/null || echo "Servidor: $(docker version | grep 'Server:' -A1 | tail -1 | awk '{print $2}')"
echo ""

# Verificar recursos disponibles
echo "üîß Verificando configuraci√≥n..."
docker system info 2>/dev/null | grep -E "CPUs|Total Memory" || echo "No se pudo obtener informaci√≥n del sistema"
echo ""

# Probar funcionalidad b√°sica
echo "üß™ Probando funcionalidad b√°sica..."
if docker run --rm hello-world >/dev/null 2>&1; then
    test_result 0 "Docker funciona correctamente"
else
    warning "Hay problemas con Docker, pero puede funcionar para Jenkins"
fi

echo ""

# Verificar puertos necesarios
echo "üîç Verificando puertos necesarios..."
check_port() {
    local port=$1
    if command -v nc >/dev/null 2>&1; then
        if nc -z localhost $port 2>/dev/null; then
            warning "Puerto $port ya est√° en uso"
        else
            test_result 0 "Puerto $port disponible"
        fi
    elif command -v netstat >/dev/null 2>&1; then
        if netstat -ln 2>/dev/null | grep ":$port " >/dev/null; then
            warning "Puerto $port ya est√° en uso"
        else
            test_result 0 "Puerto $port disponible"
        fi
    else
        echo "‚ö†Ô∏è No se puede verificar puerto $port (nc/netstat no disponible)"
    fi
}

check_port 8080
check_port 50000

echo ""
echo "üéâ Verificaci√≥n completada!"
echo ""

# Mostrar siguiente pasos
echo "üìã Pr√≥ximos pasos:"
echo "1. Si todo est√° OK, ejecutar:"
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
    echo "   ./start-jenkins.sh  (o start-jenkins.bat desde cmd)"
else
    echo "   ./start-jenkins.sh"
fi
echo "2. Si hay problemas, solucionarlos primero"
echo "3. Acceder a http://localhost:8080 cuando Jenkins est√© listo"
echo ""
