pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ACTION',
            choices: ['apply', 'destroy'],
            description: 'Seleccionar acción de Terraform'
        )
        booleanParam(
            name: 'AUTO_APPROVE',
            defaultValue: false,
            description: 'Auto-aprobar los cambios de Terraform'
        )
        string(
            name: 'TERRAFORM_WORKSPACE',
            defaultValue: 'default',
            description: 'Workspace de Terraform'
        )
    }
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TF_VAR_environment = "${params.TERRAFORM_WORKSPACE}"
        TERRAFORM_DIR = 'infrastructure'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Repositorio clonado exitosamente"
            }
        }
        
        stage('Validate Environment') {
            steps {
                script {
                    sh '''
                        echo "Validando herramientas..."
                        terraform version
                        aws --version
                        echo "Directorio actual: $(pwd)"
                        ls -la
                    '''
                }
            }
        }
        
        stage('Terraform Init') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "Inicializando Terraform..."
                            terraform init -upgrade
                            
                            echo "Seleccionando workspace: ${TERRAFORM_WORKSPACE}"
                            terraform workspace select ${TERRAFORM_WORKSPACE} || terraform workspace new ${TERRAFORM_WORKSPACE}
                            
                            echo "Workspace actual:"
                            terraform workspace show
                        '''
                    }
                }
            }
        }
        
        stage('Terraform Validate') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "Validando configuración de Terraform..."
                            terraform validate
                            
                            echo "Formateando archivos de Terraform..."
                            terraform fmt -check=true -diff=true
                        '''
                    }
                }
            }
        }
        
        stage('Terraform Plan') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        if (params.ACTION == 'apply') {
                            sh '''
                                echo "Generando plan de aplicación..."
                                terraform plan -out=tfplan -var-file=terraform.tfvars
                                
                                echo "Guardando plan en archivo de texto..."
                                terraform show -no-color tfplan > tfplan.txt
                            '''
                        } else {
                            sh '''
                                echo "Generando plan de destrucción..."
                                terraform plan -destroy -out=tfplan -var-file=terraform.tfvars
                                
                                echo "Guardando plan en archivo de texto..."
                                terraform show -no-color tfplan > tfplan.txt
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Review Plan') {
            when {
                not { params.AUTO_APPROVE }
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        echo "Plan de Terraform generado. Revisa los cambios:"
                        sh 'cat tfplan.txt'
                        
                        // Pausar para revisión manual
                        input message: "¿Proceder con la ${params.ACTION}?", ok: 'Continuar'
                    }
                }
            }
        }
        
        stage('Terraform Apply/Destroy') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        if (params.ACTION == 'apply') {
                            sh '''
                                echo "Aplicando cambios de Terraform..."
                                terraform apply -auto-approve tfplan
                                
                                echo "Mostrando outputs:"
                                terraform output
                            '''
                        } else {
                            sh '''
                                echo "Destruyendo infraestructura..."
                                terraform apply -auto-approve tfplan
                                
                                echo "Infraestructura destruida exitosamente"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Save State') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "Guardando estado de Terraform..."
                            
                            # Crear directorio de respaldo con timestamp
                            BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
                            mkdir -p $BACKUP_DIR
                            
                            # Copiar archivos de estado
                            if [ -f terraform.tfstate ]; then
                                cp terraform.tfstate $BACKUP_DIR/
                            fi
                            
                            if [ -f terraform.tfstate.backup ]; then
                                cp terraform.tfstate.backup $BACKUP_DIR/
                            fi
                            
                            if [ -f terraform.tfvars ]; then
                                cp terraform.tfvars $BACKUP_DIR/
                            fi
                            
                            echo "Estado respaldado en: $BACKUP_DIR"
                        '''
                    }
                }
            }
        }
        
        stage('Test Infrastructure') {
            when {
                equals expected: 'apply', actual: params.ACTION
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "Ejecutando pruebas de infraestructura..."
                            
                            # Ejecutar scripts de prueba si existen
                            if [ -f "../scripts/test_infrastructure.sh" ]; then
                                chmod +x ../scripts/test_infrastructure.sh
                                ../scripts/test_infrastructure.sh
                            fi
                            
                            # Verificar recursos críticos
                            echo "Verificando recursos críticos..."
                            terraform show -json | jq '.values.root_module.resources[] | select(.type == "aws_instance") | .values.public_ip' || echo "No hay instancias EC2"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            dir("${TERRAFORM_DIR}") {
                script {
                    // Limpiar archivos temporales
                    sh '''
                        echo "Limpiando archivos temporales..."
                        rm -f tfplan tfplan.txt
                    '''
                }
            }
            
            // Archivar logs y reportes
            archiveArtifacts artifacts: 'infrastructure/backups/**/*', allowEmptyArchive: true
            
            // Publicar resultados
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'infrastructure',
                reportFiles: 'terraform.tfstate',
                reportName: 'Terraform State Report'
            ])
        }
        
        success {
            echo "Pipeline ejecutado exitosamente: ${params.ACTION}"
            
            // Notificaciones (opcional)
            // slackSend(
            //     channel: '#devops',
            //     color: 'good',
            //     message: "✅ Terraform ${params.ACTION} completado exitosamente en ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            // )
        }
        
        failure {
            echo "Pipeline falló durante: ${params.ACTION}"
            
            // Notificaciones de error (opcional)
            // slackSend(
            //     channel: '#devops',
            //     color: 'danger',
            //     message: "❌ Terraform ${params.ACTION} falló en ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            // )
        }
        
        cleanup {
            // Limpiar workspace si es necesario
            cleanWs()
        }
    }
}
