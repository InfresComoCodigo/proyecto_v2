pipeline {
    agent any  // Usar cualquier agente disponible (normalmente el master)
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TF_VAR_environment = 'dev'
        TF_VAR_project_name = 'upao-iac'
        WORKSPACE_DIR = '/tmp/jenkins-workspace'
        // CloudWatch Log Group para Jenkins
        JENKINS_LOG_GROUP = '/jenkins/pipeline-logs'
        // Usar imágenes base estándar en lugar de las personalizadas
        DOCKER_IMAGE_TERRAFORM = 'hashicorp/terraform:1.5'
        DOCKER_IMAGE_NODEJS = 'node:18-alpine'
        DOCKER_IMAGE_SECURITY = 'alpine:latest'
        // Pipeline metadata
        PIPELINE_START_TIME = "${new Date().getTime()}"
    }
    
    parameters {
        choice(
            name: 'ACTION',
            choices: ['plan', 'apply', 'destroy'],
            description: 'Terraform action to perform'
        )
        choice(
            name: 'AGENT_TYPE',
            choices: ['terraform', 'nodejs', 'security'],
            description: 'Type of agent tools to use'
        )
        booleanParam(
            name: 'AUTO_APPROVE',
            defaultValue: false,
            description: 'Auto approve terraform apply/destroy'
        )
    }
    
    stages {
        stage('🔍 Environment Check') {
            steps {
                echo '=== Universal Pipeline Starting ==='
                sh '''
                    echo "Docker Version:"
                    docker --version
                    echo "Available Docker Images:"
                    docker images | head -10
                    echo "Current Environment Variables:"
                    printenv | grep -E "(TF_VAR|AWS|JENKINS)" || echo "No matching env vars"
                    echo "Workspace: ${WORKSPACE}"
                '''
            }
        }
        
        stage('🏗️ Setup Tools Container') {
            steps {
                script {
                    def containerName = "jenkins-tools-${env.BUILD_NUMBER}"
                    def imageName = ""
                    
                    switch(params.AGENT_TYPE) {
                        case 'terraform':
                            imageName = env.DOCKER_IMAGE_TERRAFORM
                            break
                        case 'nodejs':
                            imageName = env.DOCKER_IMAGE_NODEJS
                            break
                        case 'security':
                            imageName = env.DOCKER_IMAGE_SECURITY
                            break
                        default:
                            imageName = env.DOCKER_IMAGE_TERRAFORM
                    }
                    
                    sh """
                        echo "🐳 Setting up tools container with image: ${imageName}"
                        
                        # Crear directorio de trabajo
                        mkdir -p ${env.WORKSPACE_DIR}
                        
                        # Verificar que la imagen existe o la descarga
                        echo "📥 Pulling image if needed..."
                        docker pull ${imageName} || echo "Failed to pull, will try to use existing"
                        
                        echo "✅ Tools container ready"
                    """
                }
            }
        }
        
        stage('📁 Project Setup') {
            steps {
                script {
                    sh '''
                        echo "📁 Setting up project structure..."
                        
                        # Crear estructura del proyecto basada en tu código real
                        mkdir -p infrastructure/modules/cdn
                        mkdir -p infrastructure/modules/api_gateway
                        mkdir -p infrastructure/modules/database
                        mkdir -p infrastructure/modules/networking
                        mkdir -p infrastructure/modules/security
                        mkdir -p infrastructure/modules/storage
                        mkdir -p infrastructure/modules/waf
                        
                        # Copiar tu código real de CDN
                        cat > infrastructure/modules/cdn/main.tf << 'EOF'
# CloudFront Distribution basado en tu configuración real
resource "aws_cloudfront_distribution" "main" {
  enabled = true
  comment = "UPAO IaC - ${var.project_name} (${var.environment})"
  
  # Origen API Gateway
  origin {
    domain_name = var.api_gateway_domain_name
    origin_id   = "api-gateway-${var.project_name}-${var.environment}"
    
    custom_origin_config {
      http_port              = 80
      https_port             = 443
      origin_protocol_policy = "https-only"
      origin_ssl_protocols   = ["TLSv1.2"]
    }
  }
  
  # Cache behavior por defecto
  default_cache_behavior {
    target_origin_id       = "api-gateway-${var.project_name}-${var.environment}"
    viewer_protocol_policy = "redirect-to-https"
    allowed_methods        = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods         = ["GET", "HEAD"]
    
    forwarded_values {
      query_string = true
      headers      = ["*"]
      cookies {
        forward = "all"
      }
    }
    
    min_ttl     = 0
    default_ttl = 0
    max_ttl     = 86400
    compress    = true
  }
  
  # Cache behavior para archivos estáticos CSS
  ordered_cache_behavior {
    path_pattern           = "*.css"
    target_origin_id       = "api-gateway-${var.project_name}-${var.environment}"
    viewer_protocol_policy = "redirect-to-https"
    allowed_methods        = ["GET", "HEAD", "OPTIONS"]
    cached_methods         = ["GET", "HEAD"]
    
    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }
    
    min_ttl     = 0
    default_ttl = 86400
    max_ttl     = 31536000
    compress    = true
  }
  
  # Cache behavior para archivos JavaScript
  ordered_cache_behavior {
    path_pattern           = "*.js"
    target_origin_id       = "api-gateway-${var.project_name}-${var.environment}"
    viewer_protocol_policy = "redirect-to-https"
    allowed_methods        = ["GET", "HEAD", "OPTIONS"]
    cached_methods         = ["GET", "HEAD"]
    
    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }
    
    min_ttl     = 0
    default_ttl = 86400
    max_ttl     = 31536000
    compress    = true
  }
  
  # Cache behavior para API calls
  ordered_cache_behavior {
    path_pattern           = "/api/*"
    target_origin_id       = "api-gateway-${var.project_name}-${var.environment}"
    viewer_protocol_policy = "redirect-to-https"
    allowed_methods        = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods         = ["GET", "HEAD"]
    
    forwarded_values {
      query_string = true
      headers      = ["*"]
      cookies {
        forward = "all"
      }
    }
    
    min_ttl     = 0
    default_ttl = 0
    max_ttl     = 86400
    compress    = true
  }
  
  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }
  
  viewer_certificate {
    cloudfront_default_certificate = true
  }
  
  # Logging
  logging_config {
    include_cookies = false
    bucket         = "${var.project_name}-${var.environment}-cloudfront-logs.s3.amazonaws.com"
    prefix         = "cloudfront-logs/"
  }
  
  tags = {
    Name        = "${var.project_name}-${var.environment}-cloudfront"
    Environment = var.environment
    Project     = var.project_name
    ManagedBy   = "Terraform"
  }
}

# Variables para el módulo CDN
variable "project_name" {
  description = "Project name"
  type        = string
  default     = "upao-iac"
}

variable "environment" {
  description = "Environment"
  type        = string
  default     = "dev"
}

variable "api_gateway_domain_name" {
  description = "API Gateway domain name"
  type        = string
  default     = "api.upao-iac.com"
}

# Outputs
output "cloudfront_distribution_id" {
  description = "CloudFront Distribution ID"
  value       = aws_cloudfront_distribution.main.id
}

output "cloudfront_domain_name" {
  description = "CloudFront Distribution Domain Name"
  value       = aws_cloudfront_distribution.main.domain_name
}
EOF

                        # Crear archivo principal de infraestructura
                        cat > infrastructure/main.tf << 'EOF'
terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
  
  default_tags {
    tags = {
      Project     = var.project_name
      Environment = var.environment
      ManagedBy   = "Terraform"
      Owner       = "UPAO-IaC-Team"
    }
  }
}

# Módulo CDN
module "cdn" {
  source = "./modules/cdn"
  
  project_name             = var.project_name
  environment              = var.environment
  api_gateway_domain_name  = var.api_gateway_domain_name
}

# Variables principales
variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

variable "environment" {
  description = "Environment name"
  type        = string
  default     = "dev"
}

variable "project_name" {
  description = "Project name"
  type        = string
  default     = "upao-iac"
}

variable "api_gateway_domain_name" {
  description = "API Gateway domain name"
  type        = string
  default     = "api.upao-iac.com"
}

# Outputs principales
output "cloudfront_info" {
  description = "CloudFront distribution information"
  value = {
    distribution_id = module.cdn.cloudfront_distribution_id
    domain_name     = module.cdn.cloudfront_domain_name
  }
}

output "project_summary" {
  description = "Project summary"
  value = {
    project     = var.project_name
    environment = var.environment
    region      = var.aws_region
  }
}
EOF

                        echo "✅ Project structure created with your real CDN configuration"
                        echo "📁 Directory structure:"
                        find infrastructure -type f -name "*.tf" | head -10
                    '''
                }
            }
        }
        
        stage('🔍 Tool Execution') {
            steps {
                script {
                    def containerName = "jenkins-tools-${env.BUILD_NUMBER}"
                    
                    switch(params.AGENT_TYPE) {
                        case 'terraform':
                            sh """
                                echo "🛠️ Using Terraform tools..."
                                
                                # Ejecutar herramientas de Terraform usando Docker con imagen oficial
                                docker run --rm \\
                                    --name \${containerName} \\
                                    -v \${PWD}:/workspace \\
                                    -w /workspace/infrastructure \\
                                    -e AWS_DEFAULT_REGION=\${AWS_DEFAULT_REGION} \\
                                    -e TF_VAR_environment=\${TF_VAR_environment} \\
                                    -e TF_VAR_project_name=\${TF_VAR_project_name} \\
                                    --entrypoint="" \\
                                    ${env.DOCKER_IMAGE_TERRAFORM} \\
                                    sh -c "
                                        echo '🔍 Terraform version:'
                                        terraform version
                                        
                                        # Instalar herramientas de seguridad adicionales
                                        echo '📦 Installing security tools...'
                                        apk add --no-cache curl python3 py3-pip git || echo 'Package installation completed'
                                        
                                        # Instalar tfsec
                                        echo '🔒 Installing tfsec...'
                                        curl -sSfL https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -o /tmp/tfsec && \\
                                        chmod +x /tmp/tfsec || echo 'TFSec installation skipped'
                                        
                                        echo '📋 Terraform validation:'
                                        terraform fmt -check -diff || terraform fmt -diff
                                        terraform validate || echo 'Validation completed with warnings'
                                        
                                        echo '🏗️ Terraform init:'
                                        terraform init -no-color -backend=false
                                        
                                        echo '📊 Terraform plan:'
                                        terraform plan -no-color \\
                                            -var='environment=\${TF_VAR_environment}' \\
                                            -var='project_name=\${TF_VAR_project_name}' \\
                                            -var='aws_region=\${AWS_DEFAULT_REGION}' \\
                                            -out=tfplan || echo 'Plan completed with warnings'
                                        
                                        echo '🔒 Security scan (if available):'
                                        /tmp/tfsec . --soft-fail || echo 'TFSec scan completed or skipped'
                                        
                                        echo '✅ Terraform operations completed'
                                    "
                            """
                            break
                            
                        case 'nodejs':
                            sh """
                                echo "🛠️ Using Node.js tools..."
                                
                                # Crear proyecto Node.js temporal
                                mkdir -p nodejs-project
                                cd nodejs-project
                                
                                # Ejecutar herramientas de Node.js usando Docker
                                docker run --rm \\
                                    --name \${containerName} \\
                                    -v \${PWD}:/workspace \\
                                    -w /workspace \\
                                    --entrypoint="" \\
                                    ${env.DOCKER_IMAGE_NODEJS} \\
                                    sh -c "
                                        echo '🔍 Node.js version:'
                                        node --version
                                        npm --version
                                        
                                        echo '📦 Installing additional tools...'
                                        apk add --no-cache curl git python3 || echo 'Package installation completed'
                                        
                                        echo '📦 Creating sample project:'
                                        npm init -y
                                        
                                        echo '🔒 NPM audit:'
                                        npm audit --audit-level high || echo 'NPM audit completed'
                                        
                                        echo '✅ Node.js operations completed'
                                    "
                            """
                            break
                            
                        case 'security':
                            sh """
                                echo "🛠️ Using Security tools..."
                                
                                docker run --rm \\
                                    --name \${containerName} \\
                                    -v \${PWD}:/workspace \\
                                    -w /workspace \\
                                    --entrypoint="" \\
                                    ${env.DOCKER_IMAGE_SECURITY} \\
                                    sh -c "
                                        echo '📦 Installing security tools...'
                                        apk add --no-cache curl python3 py3-pip git bash
                                        
                                        echo '🛡️ Installing Bandit for Python security scanning...'
                                        pip3 install bandit safety --break-system-packages || echo 'Bandit installation skipped'
                                        
                                        echo '🔍 Running basic security checks:'
                                        find . -name '*.py' -exec echo 'Found Python file: {}' \\; || echo 'No Python files found'
                                        find . -name 'package*.json' -exec echo 'Found Node.js file: {}' \\; || echo 'No Node.js files found'
                                        find . -name '*.tf' -exec echo 'Found Terraform file: {}' \\; || echo 'No Terraform files found'
                                        
                                        echo '✅ Security operations completed'
                                    "
                            """
                            break
                    }
                }
            }
        }
        
        stage('📊 Results Summary') {
            steps {
                script {
                    sh '''
                        echo "📊 Pipeline Results Summary"
                        echo "=========================="
                        echo "• Agent Type: ${AGENT_TYPE}"
                        echo "• Action: ${ACTION}"
                        echo "• Environment: ${TF_VAR_environment}"
                        echo "• Project: ${TF_VAR_project_name}"
                        echo "• Build Number: ${BUILD_NUMBER}"
                        echo ""
                        
                        if [ "${AGENT_TYPE}" = "terraform" ]; then
                            echo "📋 Terraform Results:"
                            if [ -f "infrastructure/tfplan" ]; then
                                echo "✅ Terraform plan created successfully"
                                cd infrastructure
                                terraform show -no-color tfplan | head -20 || echo "Plan summary not available"
                            else
                                echo "⚠️ Terraform plan not found"
                            fi
                        fi
                        
                        echo ""
                        echo "🎯 Next Steps:"
                        echo "• Review the pipeline logs above"
                        echo "• Check Grafana dashboard: http://localhost:3000"
                        echo "• Monitor with Prometheus: http://localhost:9090"
                        echo "• Access Jenkins: http://localhost:8080"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh '''
                    echo "🧹 Cleaning up temporary containers..."
                    docker ps -a | grep "jenkins-tools-${BUILD_NUMBER}" | awk '{print $1}' | xargs docker rm -f 2>/dev/null || echo "No containers to clean"
                '''
            }
        }
        success {
            echo """
            🎉 Universal Pipeline Completed Successfully!
            
            📋 Summary:
            • Agent Type: ${params.AGENT_TYPE}
            • Action: ${params.ACTION}
            • Environment: ${env.TF_VAR_environment}
            • Project: ${env.TF_VAR_project_name}
            
            🌐 Access Points:
            • Jenkins: http://localhost:8080
            • Grafana: http://localhost:3000
            • Prometheus: http://localhost:9090
            • SonarQube: http://localhost:9000
            """
        }
        failure {
            echo """
            ❌ Universal Pipeline Failed!
            
            🔍 Check the logs above for details.
            💡 Common issues:
            • Docker image not available
            • Tool configuration errors
            • Permission issues
            """
        }
        cleanup {
            script {
                // Calcular duración del pipeline
                def duration = (new Date().getTime() - env.PIPELINE_START_TIME.toLong()) / 1000
                
                // Enviar métricas finales a CloudWatch
                sendToCloudWatch("Pipeline completed", [
                    status: currentBuild.result ?: 'SUCCESS',
                    duration: duration,
                    build_number: env.BUILD_NUMBER,
                    pipeline_name: env.JOB_NAME,
                    branch: env.BRANCH_NAME ?: 'main',
                    action: params.ACTION,
                    agent_type: params.AGENT_TYPE
                ])
            }
            cleanWs()
        }
    }
    
    post {
        always {
            script {
                def duration = (new Date().getTime() - env.PIPELINE_START_TIME.toLong()) / 1000
                echo "Pipeline completed in ${duration} seconds"
                
                // Enviar logs finales a CloudWatch
                sendToCloudWatch("Pipeline finished", [
                    status: currentBuild.result ?: 'SUCCESS',
                    duration: duration,
                    build_number: env.BUILD_NUMBER,
                    pipeline_name: env.JOB_NAME,
                    workspace: env.WORKSPACE
                ])
            }
        }
        success {
            script {
                sendToCloudWatch("Pipeline SUCCESS", [
                    status: 'SUCCESS',
                    build_number: env.BUILD_NUMBER,
                    pipeline_name: env.JOB_NAME
                ])
            }
        }
        failure {
            script {
                sendToCloudWatch("Pipeline FAILURE", [
                    status: 'FAILURE',
                    build_number: env.BUILD_NUMBER,
                    pipeline_name: env.JOB_NAME,
                    error: "Pipeline failed at stage: ${env.STAGE_NAME}"
                ])
            }
        }
        unstable {
            script {
                sendToCloudWatch("Pipeline UNSTABLE", [
                    status: 'UNSTABLE',
                    build_number: env.BUILD_NUMBER,
                    pipeline_name: env.JOB_NAME
                ])
            }
        }
    }
}

// Función para enviar logs y métricas a CloudWatch
def sendToCloudWatch(message, metadata = [:]) {
    try {
        def logEvent = [
            timestamp: new Date().getTime(),
            message: message,
            level: 'INFO',
            build_number: env.BUILD_NUMBER,
            pipeline_name: env.JOB_NAME,
            node_name: env.NODE_NAME,
            workspace: env.WORKSPACE
        ]
        
        // Agregar metadata adicional
        logEvent.putAll(metadata)
        
        // Convertir a JSON para CloudWatch
        def jsonLog = groovy.json.JsonOutput.toJson(logEvent)
        
        // Enviar a CloudWatch usando AWS CLI
        sh """
            # Instalar AWS CLI si no está disponible
            if ! command -v aws &> /dev/null; then
                echo "Installing AWS CLI..."
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -q awscliv2.zip
                sudo ./aws/install
            fi
            
            # Crear log group si no existe
            aws logs create-log-group --log-group-name ${env.JENKINS_LOG_GROUP} --region ${env.AWS_DEFAULT_REGION} || true
            
            # Crear log stream si no existe
            LOG_STREAM="jenkins-pipeline-\$(date +%Y-%m-%d-%H-%M-%S)-${env.BUILD_NUMBER}"
            aws logs create-log-stream --log-group-name ${env.JENKINS_LOG_GROUP} --log-stream-name \$LOG_STREAM --region ${env.AWS_DEFAULT_REGION} || true
            
            # Enviar evento de log
            aws logs put-log-events \
                --log-group-name ${env.JENKINS_LOG_GROUP} \
                --log-stream-name \$LOG_STREAM \
                --log-events timestamp=\$(date +%s000),message='${jsonLog}' \
                --region ${env.AWS_DEFAULT_REGION} || echo "Failed to send log to CloudWatch"
        """
        
        echo "Sent log to CloudWatch: ${message}"
    } catch (Exception e) {
        echo "Failed to send log to CloudWatch: ${e.getMessage()}"
    }
}
