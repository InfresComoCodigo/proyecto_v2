pipeline {
    agent any
    
    parameters {
        booleanParam(
            name: 'AUTO_APPROVE',
            defaultValue: false,
            description: 'Auto-aprobar la destrucci√≥n de infraestructura (‚ö†Ô∏è PELIGROSO)'
        )
        string(
            name: 'TERRAFORM_WORKSPACE',
            defaultValue: 'default',
            description: 'Workspace de Terraform a destruir'
        )
        booleanParam(
            name: 'FORCE_DESTROY',
            defaultValue: false,
            description: 'üö® Forzar destrucci√≥n incluso con recursos protegidos'
        )
        string(
            name: 'CONFIRMATION_TEXT',
            defaultValue: '',
            description: 'Escribe "DESTROY" para confirmar la destrucci√≥n'
        )
    }
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TF_VAR_environment = "${params.TERRAFORM_WORKSPACE}"
        TERRAFORM_DIR = 'infrastructure'
        ACTION = 'destroy'
    }
    
    stages {
        stage('Pre-flight Safety Checks') {
            steps {
                script {
                    // Verificaci√≥n de confirmaci√≥n
                    if (params.CONFIRMATION_TEXT != 'DESTROY') {
                        error("‚ùå CONFIRMACI√ìN REQUERIDA: Debes escribir 'DESTROY' en el par√°metro CONFIRMATION_TEXT para proceder")
                    }
                    
                    // Advertencia adicional para workspace de producci√≥n
                    if (params.TERRAFORM_WORKSPACE.toLowerCase().contains('prod')) {
                        echo "üö® ¬°ADVERTENCIA! Intentando destruir workspace de PRODUCCI√ìN: ${params.TERRAFORM_WORKSPACE}"
                        if (!params.FORCE_DESTROY) {
                            error("‚ùå DESTRUCCI√ìN BLOQUEADA: Para destruir producci√≥n, debes activar FORCE_DESTROY")
                        }
                    }
                    
                    echo "‚ö†Ô∏è  INICIANDO PROCESO DE DESTRUCCI√ìN"
                    echo "üéØ Workspace objetivo: ${params.TERRAFORM_WORKSPACE}"
                    echo "ü§ñ Auto-approve: ${params.AUTO_APPROVE}"
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
                echo "üîÑ Repositorio clonado exitosamente"
            }
        }
        
        stage('Validate Environment') {
            steps {
                script {
                    sh '''
                        echo "üîç Validando herramientas requeridas..."
                        terraform version
                        aws --version
                        echo "üìÅ Directorio actual: $(pwd)"
                        ls -la
                        
                        echo "üîê Verificando credenciales AWS..."
                        aws sts get-caller-identity
                    '''
                }
            }
        }
        
        stage('Backup Current State') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "üíæ Creando respaldo COMPLETO antes de destrucci√≥n..."
                            
                            # Crear directorio de respaldo con timestamp
                            BACKUP_DIR="backups/pre-destroy-$(date +%Y%m%d_%H%M%S)"
                            mkdir -p $BACKUP_DIR
                            
                            echo "üì¶ Respaldando estado actual..."
                            
                            # Respaldar todos los archivos importantes
                            if [ -f terraform.tfstate ]; then
                                cp terraform.tfstate $BACKUP_DIR/
                                echo "‚úÖ Estado principal respaldado"
                            fi
                            
                            if [ -f terraform.tfstate.backup ]; then
                                cp terraform.tfstate.backup $BACKUP_DIR/
                                echo "‚úÖ Estado de respaldo copiado"
                            fi
                            
                            if [ -f terraform.tfvars ]; then
                                cp terraform.tfvars $BACKUP_DIR/
                                echo "‚úÖ Variables respaldadas"
                            fi
                            
                            # Capturar outputs actuales
                            terraform output -json > $BACKUP_DIR/terraform-outputs-before-destroy.json 2>/dev/null || echo "{}" > $BACKUP_DIR/terraform-outputs-before-destroy.json
                            echo "‚úÖ Outputs capturados"
                            
                            # Crear manifiesto de recursos
                            terraform state list > $BACKUP_DIR/resource-list.txt 2>/dev/null || echo "No resources found" > $BACKUP_DIR/resource-list.txt
                            echo "‚úÖ Lista de recursos capturada"
                            
                            echo "üìç Respaldo completo creado en: $BACKUP_DIR"
                        '''
                    }
                }
            }
        }
        
        stage('Terraform Init') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "üöÄ Inicializando Terraform para destrucci√≥n..."
                            terraform init -upgrade
                            
                            echo "üè∑Ô∏è  Seleccionando workspace: ${TERRAFORM_WORKSPACE}"
                            terraform workspace select ${TERRAFORM_WORKSPACE} || {
                                echo "‚ùå Workspace ${TERRAFORM_WORKSPACE} no existe"
                                exit 1
                            }
                            
                            echo "üìç Workspace actual:"
                            terraform workspace show
                        '''
                    }
                }
            }
        }
        
        stage('Infrastructure Inventory') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "üìã Inventario de recursos a destruir..."
                            
                            echo "üîç Recursos actuales en el estado:"
                            terraform state list || echo "No hay recursos en el estado"
                            
                            echo ""
                            echo "üí∞ Recursos que incurren en costos:"
                            terraform state list | grep -E "(aws_instance|aws_rds|aws_nat_gateway|aws_lb)" || echo "No se encontraron recursos costosos"
                            
                            echo ""
                            echo "üóÑÔ∏è  Recursos de almacenamiento:"
                            terraform state list | grep -E "(aws_s3_bucket|aws_ebs_volume)" || echo "No se encontraron recursos de almacenamiento"
                        '''
                    }
                }
            }
        }
        
        stage('Terraform Destroy Plan') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "üí• Generando plan de destrucci√≥n..."
                            terraform plan -destroy -out=tfplan -var-file=terraform.tfvars
                            
                            echo "üíæ Guardando plan de destrucci√≥n..."
                            terraform show -no-color tfplan > destroy-plan.txt
                            
                            echo "üìä Resumen del plan de destrucci√≥n:"
                            grep -E "(Plan:|destroy)" destroy-plan.txt || echo "Plan de destrucci√≥n generado"
                        '''
                    }
                }
            }
        }
        
        stage('Review Destroy Plan') {
            when {
                equals expected: false, actual: params.AUTO_APPROVE
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        echo "‚ö†Ô∏è  PLAN DE DESTRUCCI√ìN GENERADO"
                        echo "================================"
                        sh 'cat destroy-plan.txt'
                        
                        echo ""
                        echo "üö® ADVERTENCIA: Los siguientes recursos ser√°n DESTRUIDOS PERMANENTEMENTE:"
                        sh '''
                            grep -A 5 -B 5 "will be destroyed" destroy-plan.txt || echo "Ver plan completo arriba"
                        '''
                        
                        // Pausa cr√≠tica para revisi√≥n
                        input message: "üö® ¬øCONFIRMAS LA DESTRUCCI√ìN DE TODA LA INFRAESTRUCTURA?", ok: 'S√ç, DESTRUIR TODO'
                    }
                }
            }
        }
        
        stage('Final Confirmation') {
            when {
                equals expected: false, actual: params.AUTO_APPROVE
            }
            steps {
                script {
                    echo "üõë √öLTIMA OPORTUNIDAD PARA CANCELAR"
                    echo "Workspace: ${params.TERRAFORM_WORKSPACE}"
                    echo "Esta acci√≥n NO se puede deshacer"
                    
                    input message: "üî• CONFIRMACI√ìN FINAL: ¬øProceder con la destrucci√≥n IRREVERSIBLE?", ok: 'DESTRUIR AHORA'
                }
            }
        }
        
        stage('Terraform Destroy') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "üí• INICIANDO DESTRUCCI√ìN DE INFRAESTRUCTURA..."
                            echo "‚è∞ Timestamp: $(date)"
                            
                            # Aplicar el plan de destrucci√≥n
                            terraform apply -auto-approve tfplan
                            
                            echo ""
                            echo "üîç Verificando destrucci√≥n completa..."
                            REMAINING_RESOURCES=$(terraform state list 2>/dev/null | wc -l)
                            
                            if [ $REMAINING_RESOURCES -eq 0 ]; then
                                echo "‚úÖ DESTRUCCI√ìN COMPLETA: No quedan recursos"
                            else
                                echo "‚ö†Ô∏è  ADVERTENCIA: Quedan $REMAINING_RESOURCES recursos"
                                terraform state list
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Cleanup Workspace') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "üßπ Limpiando workspace despu√©s de destrucci√≥n..."
                            
                            # Crear registro final
                            echo "Infraestructura destruida: $(date)" > destruction-log.txt
                            echo "Workspace: ${TERRAFORM_WORKSPACE}" >> destruction-log.txt
                            echo "Build: ${BUILD_NUMBER}" >> destruction-log.txt
                            
                            # Mantener logs importantes
                            CLEANUP_DIR="backups/post-destroy-$(date +%Y%m%d_%H%M%S)"
                            mkdir -p $CLEANUP_DIR
                            
                            if [ -f destruction-log.txt ]; then
                                cp destruction-log.txt $CLEANUP_DIR/
                            fi
                            
                            if [ -f destroy-plan.txt ]; then
                                cp destroy-plan.txt $CLEANUP_DIR/
                            fi
                            
                            echo "üìù Logs de destrucci√≥n guardados en: $CLEANUP_DIR"
                        '''
                    }
                }
            }
        }
        
        stage('Generate Destruction Report') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "üìä Generando reporte de destrucci√≥n..."
                            
                            # Crear reporte HTML
                            cat > destruction-report.html << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Infrastructure Destruction Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .warning { color: red; font-weight: bold; }
        .success { color: green; }
        .info { color: blue; }
        .header { background-color: #ffe6e6; padding: 10px; border: 1px solid #ff0000; }
        pre { background-color: #f5f5f5; padding: 10px; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üí• Infrastructure Destruction Report</h1>
        <p class="warning">DESTRUCTION COMPLETED</p>
        <p class="info">Destruction Date: $(date)</p>
        <p class="info">Workspace: ${TERRAFORM_WORKSPACE}</p>
        <p class="info">Build: ${BUILD_NUMBER}</p>
    </div>
    
    <h2 class="warning">‚ö†Ô∏è Destroyed Resources</h2>
    <p>All infrastructure resources have been permanently destroyed.</p>
    
    <h2>üìã Destruction Log</h2>
    <pre>$(cat destruction-log.txt 2>/dev/null || echo "No additional logs")</pre>
    
    <h2 class="success">‚úÖ Cleanup Completed</h2>
    <p>Infrastructure destruction completed successfully.</p>
    <p class="warning">‚ö†Ô∏è Remember: Backups are available in the backups/ directory.</p>
</body>
</html>
EOF
                            
                            echo "‚úÖ Reporte de destrucci√≥n generado: destruction-report.html"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            dir("${TERRAFORM_DIR}") {
                script {
                    // Limpiar archivos temporales
                    sh '''
                        echo "üßπ Limpiando archivos temporales..."
                        rm -f tfplan
                    '''
                }
            }
            
            // Archivar logs y reportes importantes
            archiveArtifacts artifacts: 'infrastructure/backups/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'infrastructure/destruction-report.html', allowEmptyArchive: true
            archiveArtifacts artifacts: 'infrastructure/destroy-plan.txt', allowEmptyArchive: true
            archiveArtifacts artifacts: 'infrastructure/destruction-log.txt', allowEmptyArchive: true
            
            // Publicar reporte HTML
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'infrastructure',
                reportFiles: 'destruction-report.html',
                reportName: 'Destruction Report'
            ])
        }
        
        success {
            echo "üí• Pipeline de DESTRUCCI√ìN ejecutado exitosamente"
            echo "‚ö†Ô∏è  INFRAESTRUCTURA COMPLETAMENTE DESTRUIDA"
            echo "üíæ Respaldos disponibles en directorio backups/"
            
            // Notificaciones de destrucci√≥n (opcional)
            // slackSend(
            //     channel: '#devops',
            //     color: 'warning',
            //     message: "üí• Infrastructure DESTROYED successfully in ${env.JOB_NAME} #${env.BUILD_NUMBER}\n‚ö†Ô∏è Environment: ${params.TERRAFORM_WORKSPACE}\nüíæ Backups preserved"
            // )
        }
        
        failure {
            echo "‚ùå Pipeline de DESTRUCCI√ìN fall√≥"
            echo "üîç Revisar estado de recursos manualmente"
            
            // En caso de fallo, mostrar informaci√≥n √∫til
            dir("${TERRAFORM_DIR}") {
                script {
                    sh '''
                        echo "üîç Estado actual de Terraform:"
                        terraform state list 2>/dev/null || echo "No se puede listar el estado"
                        
                        echo "üìã Recursos que podr√≠an quedar:"
                        terraform show 2>/dev/null | head -50 || echo "No se puede mostrar el estado"
                    '''
                }
            }
            
            // Notificaciones de error cr√≠tico (opcional)
            // slackSend(
            //     channel: '#devops',
            //     color: 'danger',
            //     message: "üö® Infrastructure DESTRUCTION failed in ${env.JOB_NAME} #${env.BUILD_NUMBER}\n‚ö†Ô∏è Environment: ${params.TERRAFORM_WORKSPACE}\nüîç Manual intervention required"
            // )
        }
        
        cleanup {
            // NO limpiar workspace autom√°ticamente para preservar logs de destrucci√≥n
            echo "‚ö†Ô∏è Workspace preserved for destruction audit"
        }
    }
}
